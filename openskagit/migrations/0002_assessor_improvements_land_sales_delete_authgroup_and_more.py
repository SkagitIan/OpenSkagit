# Generated by Django 5.0 on 2025-10-10 18:09

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('openskagit', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessor',
            fields=[
                ('parcel_number', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('address', models.TextField(blank=True, null=True)),
                ('neighborhood_code', models.TextField(blank=True, null=True)),
                ('land_use_code', models.TextField(blank=True, null=True)),
                ('building_value', models.FloatField(blank=True, null=True)),
                ('impr_land_value', models.FloatField(blank=True, null=True)),
                ('unimpr_land_value', models.BigIntegerField(blank=True, null=True)),
                ('timber_land_value', models.BigIntegerField(blank=True, null=True)),
                ('assessed_value', models.BigIntegerField(blank=True, null=True)),
                ('taxable_value', models.BigIntegerField(blank=True, null=True)),
                ('total_market_value', models.BigIntegerField(blank=True, null=True)),
                ('acres', models.FloatField(blank=True, null=True)),
                ('sale_date', models.DateTimeField(blank=True, null=True)),
                ('sale_price', models.FloatField(blank=True, null=True)),
                ('sale_deed_type', models.TextField(blank=True, null=True)),
                ('total_taxes', models.TextField(blank=True, null=True)),
                ('year_built', models.BigIntegerField(blank=True, null=True)),
                ('eff_year_built', models.BigIntegerField(blank=True, null=True)),
                ('living_area', models.BigIntegerField(blank=True, null=True)),
                ('building_style', models.TextField(blank=True, null=True)),
                ('foundation', models.TextField(blank=True, null=True)),
                ('exterior_walls', models.TextField(blank=True, null=True)),
                ('roof_covering', models.TextField(blank=True, null=True)),
                ('roof_style', models.TextField(blank=True, null=True)),
                ('floor_covering', models.TextField(blank=True, null=True)),
                ('floor_construction', models.TextField(blank=True, null=True)),
                ('interior_finish', models.TextField(blank=True, null=True)),
                ('bathrooms', models.FloatField(blank=True, null=True)),
                ('bedrooms', models.FloatField(blank=True, null=True)),
                ('garage_sqft', models.FloatField(blank=True, null=True)),
                ('heat_air_cond', models.TextField(blank=True, null=True)),
                ('fireplace', models.TextField(blank=True, null=True)),
                ('finished_basement', models.FloatField(blank=True, null=True)),
                ('unfinished_basement', models.BigIntegerField(blank=True, null=True)),
                ('fire_district', models.TextField(blank=True, null=True)),
                ('school_district', models.TextField(blank=True, null=True)),
                ('city_district', models.TextField(blank=True, null=True)),
                ('levy_code', models.TextField(blank=True, null=True)),
                ('current_use_adjustment', models.FloatField(blank=True, null=True)),
                ('tide_land_value', models.BigIntegerField(blank=True, null=True)),
                ('senior_exemption_adjustment', models.BigIntegerField(blank=True, null=True)),
                ('property_type', models.TextField(blank=True, null=True)),
                ('has_septic', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'assessor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Improvements',
            fields=[
                ('parcel_number', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('improvement_id', models.BigIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('building_style', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('improvement_value', models.BigIntegerField(blank=True, null=True)),
                ('new_construction_year', models.FloatField(blank=True, null=True)),
                ('total_living_area', models.FloatField(blank=True, null=True)),
                ('segment_id', models.BigIntegerField(blank=True, null=True)),
                ('improvement_detail_type_code', models.TextField(blank=True, null=True)),
                ('improvement_detail_class_code', models.TextField(blank=True, null=True)),
                ('improvement_detail_method_code', models.FloatField(blank=True, null=True)),
                ('condition_code', models.TextField(blank=True, null=True)),
                ('calculated_area', models.FloatField(blank=True, null=True)),
                ('unit_price', models.FloatField(blank=True, null=True)),
                ('depreciation_pct', models.FloatField(blank=True, null=True)),
                ('improvement_detail_value', models.BigIntegerField(blank=True, null=True)),
                ('construction_style', models.TextField(blank=True, null=True)),
                ('foundation', models.TextField(blank=True, null=True)),
                ('exterior_wall', models.TextField(blank=True, null=True)),
                ('roof_covering', models.TextField(blank=True, null=True)),
                ('roof_style', models.TextField(blank=True, null=True)),
                ('flooring', models.TextField(blank=True, null=True)),
                ('floor_construction', models.TextField(blank=True, null=True)),
                ('interior_finish', models.TextField(blank=True, null=True)),
                ('plumbing_code', models.TextField(blank=True, null=True)),
                ('appliances', models.TextField(blank=True, null=True)),
                ('heating_cooling', models.TextField(blank=True, null=True)),
                ('fireplace', models.TextField(blank=True, null=True)),
                ('rooms', models.FloatField(blank=True, null=True)),
                ('bedrooms', models.FloatField(blank=True, null=True)),
                ('effective_year_built', models.FloatField(blank=True, null=True)),
                ('actual_year_built', models.BigIntegerField(blank=True, null=True)),
                ('sketch_path', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'improvements',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('parcel_number', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('property_value_year', models.FloatField(blank=True, null=True)),
                ('land_segment_id', models.FloatField(blank=True, null=True)),
                ('land_type', models.TextField(blank=True, null=True)),
                ('appraisal_method', models.TextField(blank=True, null=True)),
                ('size_acres', models.FloatField(blank=True, null=True)),
                ('size_square_feet', models.FloatField(blank=True, null=True)),
                ('effective_front', models.FloatField(blank=True, null=True)),
                ('actual_front', models.FloatField(blank=True, null=True)),
                ('land_adjustment_factor', models.FloatField(blank=True, null=True)),
                ('adjusted_value', models.FloatField(blank=True, null=True)),
                ('market_unit_price', models.FloatField(blank=True, null=True)),
                ('market_value', models.FloatField(blank=True, null=True)),
                ('open_space_value', models.FloatField(blank=True, null=True)),
                ('open_space_use_code_desc', models.FloatField(blank=True, null=True)),
                ('agricultural_unit_price', models.FloatField(blank=True, null=True)),
                ('open_space_appraisal_method', models.TextField(blank=True, null=True)),
                ('land_segment_comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'land',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('sale_id', models.BigIntegerField(blank=True, null=True)),
                ('parcel_number', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('account_number', models.TextField(blank=True, null=True)),
                ('seller_name', models.TextField(blank=True, null=True)),
                ('buyer_name', models.TextField(blank=True, null=True)),
                ('sale_price', models.BigIntegerField(blank=True, null=True)),
                ('sale_date', models.DateTimeField(blank=True, null=True)),
                ('sale_type', models.TextField(blank=True, null=True)),
                ('recording_number', models.TextField(blank=True, null=True)),
                ('deed_type', models.TextField(blank=True, null=True)),
                ('deed_date', models.DateTimeField(blank=True, null=True)),
                ('revaluation_area', models.FloatField(blank=True, null=True)),
                ('excise_number', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sales',
                'managed': False,
            },
        ),
        migrations.DeleteModel(
            name='AuthGroup',
        ),
        migrations.DeleteModel(
            name='AuthGroupPermissions',
        ),
        migrations.DeleteModel(
            name='AuthPermission',
        ),
        migrations.DeleteModel(
            name='AuthUser',
        ),
        migrations.DeleteModel(
            name='AuthUserGroups',
        ),
        migrations.DeleteModel(
            name='AuthUserUserPermissions',
        ),
        migrations.DeleteModel(
            name='DjangoAdminLog',
        ),
        migrations.DeleteModel(
            name='DjangoContentType',
        ),
        migrations.DeleteModel(
            name='DjangoMigrations',
        ),
        migrations.DeleteModel(
            name='DjangoSession',
        ),
    ]
